using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Configuration;
using System.Data.SqlClient;
using System.Data;
using System.Net.Mail;
using System.Xml.Linq;

namespace CatholicAPI
{
    public static class Utility
    {
        static string connectionString = ConfigurationManager.AppSettings["connectionString"];
        static string reportMail = ConfigurationManager.AppSettings["reportMail"];
        static SmtpClient mailClient = new SmtpClient();

        #region Mailing Report

        public static void SendInvalidTestReportMail(string test, string queuer)
        {
            mailClient.Host = "ddcsmtp.ddcinternal.com";
            MailMessage mail = new MailMessage("automation@desertdevco.com", reportMail);
            mail.Subject = "Invalid Automated Test Submission - " + test;
            mail.Body = "An invalid automated test was tried to be queued using the CatholicAPI. \nTest: " + test + "\nUser: " + queuer;
            mailClient.Send(mail);
        }

        #endregion

        #region Test Tags

        public static bool TestExists(string test)
        {
            bool exists = false;
            int testID = 0;
            
            try
            {
                testID = Convert.ToInt32(test);
            }
            catch (Exception) { }

            if (testID == 0)
                return false;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT count(*) FROM test WHERE id_test=" + testID;
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    exists = Convert.ToBoolean(Convert.ToInt32(result));
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return exists;
        }


        public static int GetTestTemplateID(string templateName)
        {
            int testID = 0;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT id_test FROM test_template WHERE name='" + templateName + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    testID = Convert.ToInt32(result);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return testID;
        }

        public static int GetNewGameTestMachId(string label)
        {
            int machID = 0;

            if (label.Contains("NEW_GAME_TEST_RTG_") || label.Contains("NEW_GAME_TEST_NW_"))
            {
                string temp = label.Substring(label.LastIndexOf("_") + 1);
                try
                {
                    machID = Convert.ToInt32(temp);
                }
                catch (Exception) { }
            }

            return machID;
        }

        public static int InsertNewTest(string name, string platform)
        {
            int newTestId = 0;

            try
            {
                string storedProc = "[dbo].[pub_InsertNewTest]";

                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand(storedProc, sqlConnection) { CommandType = CommandType.StoredProcedure };
                    sqlConnection.Open();

                    cmd.CommandText = storedProc;
                    cmd.Parameters.AddWithValue("@Name", name);
                    cmd.Parameters.AddWithValue("@Creator", "AUTOGENERATED");
                    cmd.Parameters.AddWithValue("@Description", DBNull.Value);
                    cmd.Parameters.AddWithValue("@IDPlatform", platform);

                    var returnParameter = cmd.Parameters.Add("@testID", SqlDbType.Int);
                    returnParameter.Direction = ParameterDirection.ReturnValue;

                    cmd.ExecuteNonQuery();
                    newTestId = Convert.ToInt32(returnParameter.Value);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return newTestId;
        }

        public static int AddTestStep(int testId, int stepId, string customParams)
        {
            int result = -1;

            try
            {
                string storedProc = "[dbo].[pub_AddTestStep]";

                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand(storedProc, sqlConnection) { CommandType = CommandType.StoredProcedure };
                    sqlConnection.Open();

                    cmd.CommandText = storedProc;
                    cmd.Parameters.AddWithValue("@TestID", testId);
                    cmd.Parameters.AddWithValue("@StepID", stepId);
                    cmd.Parameters.AddWithValue("@CustomParameters", customParams);
                    cmd.Parameters.AddWithValue("@Quantity", 1);

                    result = cmd.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return result;
        }

        public static XElement CreateCustomParameters(string machID, string platform)
        {
            SqlConnection automationDBConn = null;
            DataTable dt = new DataTable();
            XElement gamesXML = null;
            XElement testExceptions = null;

            int step = platform == "RTG" ? 1 : 3;
            string query = "SELECT DefaultParameters FROM step WHERE id_step=" + step;

            try
            {
                automationDBConn = new SqlConnection(connectionString);
                automationDBConn.Open();

                SqlCommand cmd = new SqlCommand(query, automationDBConn);
                cmd.CommandType = CommandType.Text;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                gamesXML = XElement.Parse(dt.Rows[0]["DefaultParameters"].ToString());
                var gameList = gamesXML.Descendants("gameList");

                testExceptions = GetDynamicTestExceptions();
                var keys = testExceptions.Descendants("dynamicTest");

                var singleGame = gameList.Elements()
                    .Where(e => e.Attribute("MachID").Value.Equals(machID))
                    .Select(e => e).Single();

                singleGame.SetAttributeValue("Status", "true");
                var exceptions = keys.Elements("Exceptions").First().Attribute("keys").Value.ToString();

                foreach (var item in singleGame.Descendants())
                {
                    if (!exceptions.Contains(item.Attribute("key").Value))
                    {
                        item.SetAttributeValue("value", "true");
                    }
                }

                //Console.WriteLine(singleGame);
                //Console.WriteLine(gamesXML);
            }
            catch (Exception e)
            {
                Console.WriteLine("{0} exception Caught", e);
            }
            finally
            {
                if (automationDBConn != null)
                    if (automationDBConn.State != ConnectionState.Closed)
                        automationDBConn.Close();
            }

            return gamesXML;
        }

        public static void UpdateTestTemplateTestId(int testId)
        {
            int templateId = ConfigurationManager.AppSettings["CasinoPlatform"] == "RTG" ? 2 : 5;
            string query = "UPDATE test_template SET id_test=" + testId + " WHERE id_test_template=" + templateId;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    cmd.ExecuteScalar();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("An error exception was triggered when executing query (" + query + ") in casino DB. Exception = " + e.ToString());
            }
        }

        public static XElement GetDynamicTestExceptions()
        {
            SqlConnection automationDBConn = null;
            DataTable dt = new DataTable();
            XElement exceptionsXML = null;

            string query = "SELECT value FROM test_parameters WHERE name='Dynamic Test Exceptions'";

            try
            {
                automationDBConn = new SqlConnection(connectionString);
                automationDBConn.Open();

                SqlCommand cmd = new SqlCommand(query, automationDBConn);
                cmd.CommandType = CommandType.Text;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dt);

                exceptionsXML = XElement.Parse(dt.Rows[0]["value"].ToString());
            }
            catch (Exception e)
            {
                Console.WriteLine("{0} exception Caught", e);
            }
            finally
            {
                if (automationDBConn != null)
                    if (automationDBConn.State != ConnectionState.Closed)
                        automationDBConn.Close();
            }

            return exceptionsXML;
        }

        #endregion

        # region FrontLine

        public static int GetCasinoID(string casinoPrefix)
        {
            int casinoID = 0;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT casino_id FROM casino WHERE casinoprefix='" + casinoPrefix + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    casinoID = Convert.ToInt32(result);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return casinoID;
        }

        public static int GetTestIdFromTag(string testTag)
        {
            int testID = 0;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT id_test FROM test_template WHERE Prod_Monitoring=1 AND name='" + testTag + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    testID = Convert.ToInt32(result);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return testID;
        }

        public static int GetTestJournalIdFromCasino(int casinoId, int testId)
        {
            int testJournalID = 0;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT id_test_journal FROM test_journal WHERE CasinoID=" + casinoId + " AND id_test=" + testId;
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    testJournalID = Convert.ToInt32(result);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return testJournalID;
        }

        public static int GetTestJournalStatus(int journalId)
        {
            int journalStatus = 0;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT id_status FROM test_journal WHERE id_test_journal=" + journalId;
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    journalStatus = Convert.ToInt32(result);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return journalStatus;
        }

        public static string GetTestJournalLog(int journalId, int testId, int stepId)
        {
            string log = string.Empty;
            DataSet data = new DataSet();

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT TSJ.step_details FROM test_step_journal TSJ INNER JOIN test_step TS ON TSJ.id_test_step=TS.id_teststep "
                                 + "WHERE TSJ.id_test_journal=" + journalId + " AND TS.id_test=" + testId + " AND TS.id_step=" + stepId + " ORDER BY TSJ.start_time DESC";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(data);

                    foreach (DataRow dr in data.Tables[0].Rows)
                    {
                        log += dr["step_details"].ToString();
                        break;
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return log;
        }

        public static string GetCasinoLobbyUrl(string casinoPrefix)
        {
            string url = string.Empty;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT AdditionalInfo.value('(/configuration/casinoInfo/LobbyURL/@value)[1]','varchar(max)') FROM casino WHERE casinoprefix='" + casinoPrefix + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    url = (result ?? "").ToString();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return url;
        }

        public static string GetCasinoCashierUrl(string casinoPrefix)
        {
            string url = string.Empty;

            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "SELECT AdditionalInfo.value('(/configuration/casinoInfo/CashierURL/@value)[1]','varchar(max)') FROM casino WHERE casinoprefix='" + casinoPrefix + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                    url = (result ?? "").ToString();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return url;
        }

        public static void UpdateCasinoLobbyUrl(string casinoPrefix, string url)
        {
            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "UPDATE casino SET AdditionalInfo.modify('replace value of (/configuration/casinoInfo/LobbyURL/@value)[1] with sql:variable(\"@newUrl\")') WHERE casinoprefix='" + casinoPrefix + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    cmd.Parameters.AddWithValue("newUrl", url);
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }
        }

        public static void UpdateCasinoCashierUrl(string casinoPrefix, string url)
        {
            try
            {
                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    string query = "UPDATE casino SET AdditionalInfo.modify('replace value of (/configuration/casinoInfo/CashierURL/@value)[1] with sql:variable(\"@newUrl\")') WHERE casinoprefix='" + casinoPrefix + "'";
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    cmd.Parameters.AddWithValue("newUrl", url);
                    sqlConnection.Open();
                    object result = cmd.ExecuteScalar();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }
        }

        public static void ValidateCasinoUrl(string testTag, string casinoPrefix, string testUrl)
        {
            string storedUrl = string.Empty;

            if (testTag.Contains("MOBILE_LOBBY_TEST"))
            {
                storedUrl = Utility.GetCasinoLobbyUrl(casinoPrefix);
                if (storedUrl != testUrl)
                    Utility.UpdateCasinoLobbyUrl(casinoPrefix, testUrl);
            }

            if (testTag.Contains("MOBILE_CASHIER_TEST"))
            {
                storedUrl = Utility.GetCasinoCashierUrl(casinoPrefix);
                if (storedUrl != testUrl)
                    Utility.UpdateCasinoCashierUrl(casinoPrefix, testUrl);
            }
        }

        public static bool QueueTestJournal(int casinoId, int testId, int priority, string queuer)
        {
            int queued = 0;

            try
            {
                object result = 0;
                string name = "";
                string query = "SELECT name FROM test WHERE id_test=" + testId;
                string storedProc = "[dbo].[pub_queueTestByDate]";

                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand(query, sqlConnection) { CommandType = CommandType.Text };
                    sqlConnection.Open();
                    result = cmd.ExecuteScalar();
                    name = Convert.ToString(result);

                    cmd.CommandText = storedProc;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@TestID", testId);
                    cmd.Parameters.AddWithValue("@TargetDate", System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    cmd.Parameters.AddWithValue("@Priority", priority);
                    cmd.Parameters.AddWithValue("@Queuer", queuer);
                    cmd.Parameters.AddWithValue("@CasinoID", casinoId);
                    cmd.Parameters.AddWithValue("@Name", name);

                    queued = cmd.ExecuteNonQuery();
                    //TODO: seems like always returns -1 (maybe it is needed to add the return param???)
                    //queued = queued >= 0 ? 1 : 0;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return Convert.ToBoolean(queued);
        }

        public static bool ReQueueTestJournal(int journalId)
        {
            int requeued = 0;

            try
            {
                string storedProc = "[dbo].[pub_reQueueTestJournalByID]";

                using (SqlConnection sqlConnection = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand(storedProc, sqlConnection) { CommandType = CommandType.StoredProcedure };
                    cmd.Parameters.AddWithValue("@TestJournalID", journalId);

                    sqlConnection.Open();
                    requeued = cmd.ExecuteNonQuery();

                    //TODO: seems like always returns -1 (maybe it is needed to add the return param???)
                    //queued = queued >= 0 ? 1 : 0;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception caught: " + e.Message);
            }

            return Convert.ToBoolean(requeued);
        }

        #endregion
    }
}